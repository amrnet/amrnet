name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend testing and linting
  frontend-test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install root dependencies
        run: npm ci

      - name: 📦 Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: 🔍 Lint frontend code
        working-directory: ./client
        run: npm run lint

      - name: 🧪 Run frontend tests
        working-directory: ./client
        run: npm run test -- --coverage --watchAll=false

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend testing and linting
  backend-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: 🔍 Lint Python code
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Check code formatting
        run: |
          black --check .
          isort --check-only .

      - name: 🧪 Run backend tests
        env:
          MONGODB_URI: mongodb://localhost:27017/amrnet_test
        run: pytest --cov=./ --cov-report=xml

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Build and test application
  build-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: 🏗️ Build application
        run: |
          cd client
          npm run build

      - name: 📦 Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: client/build

  # End-to-end testing
  e2e-test:
    runs-on: ubuntu-latest
    needs: build-test

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: client/build

      - name: 🚀 Start application
        run: |
          npm run start:prod &
          sleep 30

      - name: 🧪 Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          start: npm run start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120

      - name: 📊 Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: client/cypress/screenshots

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run security audit (npm)
        run: |
          npm audit --audit-level moderate
          cd client && npm audit --audit-level moderate

      - name: 🔐 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: 🔐 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Docker build and push (only on main branch)
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile.prod
          push: true
          tags: |
            amrnet/frontend:latest
            amrnet/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            amrnet/backend:latest
            amrnet/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment script here

  # Deploy to production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment script here

      - name: 🔔 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Documentation deployment
  docs-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Sphinx dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: 🏗️ Build documentation
        run: |
          cd docs
          make html

      - name: 🚀 Deploy to ReadTheDocs
        run: |
          echo "Documentation will be automatically built by ReadTheDocs"
